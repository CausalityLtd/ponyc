test-ci-lib-llvm: &test-ci-lib-llvm
  name: Run make lib-llvm
  command: |
    # When testing override CPUs in command line, such as:
    #   $ circleci build -e CPUs=11 --job ubuntu-debug
    echo 'if [ "$CPUs" == "" ]; then cnt=$(nproc); if (( $cnt >= 4 )); then (( cnt=$cnt / 4 )); else cnt=1; fi; export CPUs=$cnt; fi;' >> $BASH_ENV
    source $BASH_ENV
    echo "make-llvm: CPUs=$CPUs test_ci_params='$test_ci_params'"
    make -f Makefile-lib-llvm test-ci -j$CPUs $test_ci_params

version: 2
jobs:
  verify-changelog:
    docker:
      - image: ponylang/changelog-tool:release
    steps:
      - checkout
      - run: changelog-tool verify CHANGELOG.md

  validate-docker-image-builds:
      docker:
        - image: docker:17.05.0-ce-git
      steps:
        - checkout
        - setup_remote_docker

        - run: docker build --cache-from=app -t app .
  validate-shell-scripts:
    docker:
      - image: ponylang/ponyc-ci:shellcheck
    steps:
      - checkout

      - run: find . -name '*.bash' -exec shellcheck {} \;

  # Jobs for building and testing with the system installed llvm
  llvm-600-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-6.0.0
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-600-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-6.0.0
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  llvm-501-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-5.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-501-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-5.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  llvm-401-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-4.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-401-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-4.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  llvm-391-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-391-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  openssl-110:
    docker:
      - image: ponylang/ponyc-ci:openssl-1.1.0
        user: pony
    steps:
      - checkout
      - run: make all default_ssl=openssl_1.1.0 default_pic=true -j3
      - run: make test-ci default_ssl=openssl_1.1.0 default_pic=true

  alpine-llvm-391-debug:
    docker:
      - image: ponylang/ponyc-ci:alpine-llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  alpine-llvm-391-release:
    docker:
      - image: ponylang/ponyc-ci:alpine-llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  centos7-llvm-391-debug:
    docker:
      - image: ponylang/ponyc-ci:centos7-llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true use="llvm_link_static" -j3
      - run: make test-ci config=debug default_pic=true use="llvm_link_static"

  centos7-llvm-391-release:
    docker:
      - image: ponylang/ponyc-ci:centos7-llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true use="llvm_link_static" -j3
      - run: make test-ci config=release default_pic=true use="llvm_link_static"
  ubuntu-18.04-system-llvm-debug:
    docker:
      - image: ponylang/ponyc-ci:ubuntu-18.04
        user: pony
    steps:
      - checkout
      - run: make test-ci config=debug default_pic=true default_ssl=openssl_1.1.0
  ubuntu-18.04-system-llvm-release:
    docker:
      - image: ponylang/ponyc-ci:ubuntu-18.04
        user: pony
    steps:
      - checkout
      - run: make test-ci config=release default_pic=true default_ssl=openssl_1.1.0

  # Jobs for building and testing with ponyc vendor lib/llvm
  lib-llvm-ubuntu-default:
    docker:
      - image: ponylang/ponyc-ci:ubuntu
        user: pony
    steps:
      - checkout
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-debug:
    docker:
      - image: ponylang/ponyc-ci:ubuntu
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=debug default_pic=true"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-release:
    docker:
      - image: ponylang/ponyc-ci:ubuntu
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-18.04-debug:
    docker:
      - image: ponylang/ponyc-ci:ubuntu-18.04
        user: pony
    steps:
      - checkout
      - run: echo 'export CC=clang CXX=clang++ test_ci_params="config=debug default_pic=true default_ssl=openssl_1.1.0"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-18.04-release:
    docker:
      - image: ponylang/ponyc-ci:ubuntu-18.04
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true default_ssl=openssl_1.1.0"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-openssl-110-debug:
    docker:
      - image: ponylang/ponyc-ci:ubuntu-openssl-110
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=debug default_pic=true default_ssl=openssl_1.1.0"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-openssl-110-release:
    docker:
      - image: ponylang/ponyc-ci:ubuntu-openssl-110
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true default_ssl=openssl_1.1.0"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-llvm-600-debug:
    docker:
      - image: ponylang/ponyc-ci:ubuntu
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=debug default_pic=true llvm_proj=llvm-6.0.0"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-ubuntu-llvm-600-release:
    docker:
      - image: ponylang/ponyc-ci:ubuntu
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true llvm_proj=llvm-6.0.0"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-alpine-debug:
    docker:
      - image: ponylang/ponyc-ci:alpine
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=debug default_pic=true"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-alpine-release:
    docker:
      - image: ponylang/ponyc-ci:alpine
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-centos7-debug:
    docker:
      - image: ponylang/ponyc-ci:centos7
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=debug default_pic=true use=llvm_link_static"' >> $BASH_ENV
      - run: *test-ci-lib-llvm
  lib-llvm-centos7-release:
    docker:
      - image: ponylang/ponyc-ci:centos7
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true use=llvm_link_static"' >> $BASH_ENV
      - run: *test-ci-lib-llvm

  # Jobs for building and testing with ponyc system installed cross-llvm
  cross-llvm-600-debug-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-6.0.0-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-600-release-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-6.0.0-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-501-debug-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-5.0.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-501-release-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-5.0.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-401-debug-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-4.0.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-401-release-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-4.0.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-391-debug-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-3.9.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-391-release-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-3.9.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-600-debug-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-6.0.0-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-600-release-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-6.0.0-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-501-debug-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-5.0.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-501-release-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-5.0.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-401-debug-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-4.0.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-401-release-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-4.0.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-391-debug-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-3.9.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-391-release-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-3.9.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-600-debug-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-6.0.0-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-600-release-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-6.0.0-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-501-debug-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-5.0.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-501-release-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-5.0.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-401-debug-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-4.0.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-401-release-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-4.0.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-391-debug-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-3.9.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-391-release-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-3.9.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

workflows:
  version: 2
  tests:
    jobs:
      - verify-changelog
      - validate-shell-scripts
      - validate-docker-image-builds

      # Run jobs building and testing with the system installed llvm
      - llvm-600-debug
      - llvm-600-release
      - llvm-501-debug
      - llvm-501-release
      - llvm-401-debug
      - llvm-401-release
      - llvm-391-debug
      - llvm-391-release
      - openssl-110
      - alpine-llvm-391-debug
      - alpine-llvm-391-release
      - centos7-llvm-391-debug
      - centos7-llvm-391-release
      - ubuntu-18.04-system-llvm-debug
      - ubuntu-18.04-system-llvm-release
      - cross-llvm-600-debug-arm
      - cross-llvm-600-release-arm
      - cross-llvm-501-debug-arm
      - cross-llvm-501-release-arm
      - cross-llvm-401-debug-arm
      - cross-llvm-401-release-arm
      - cross-llvm-391-debug-arm
      - cross-llvm-391-release-arm
      - cross-llvm-600-debug-armhf
      - cross-llvm-600-release-armhf
      - cross-llvm-501-debug-armhf
      - cross-llvm-501-release-armhf
      - cross-llvm-401-debug-armhf
      - cross-llvm-401-release-armhf
      - cross-llvm-391-debug-armhf
      - cross-llvm-391-release-armhf
#      - cross-llvm-600-debug-aarch64
#      - cross-llvm-600-release-aarch64
      - cross-llvm-501-debug-aarch64
      - cross-llvm-501-release-aarch64
      - cross-llvm-401-debug-aarch64
      - cross-llvm-401-release-aarch64
      - cross-llvm-391-debug-aarch64
      - cross-llvm-391-release-aarch64

      # Jobs for building and testing with ponyc vendor lib/llvm
      - lib-llvm-ubuntu-default
      - lib-llvm-ubuntu-llvm-600-debug
      - lib-llvm-ubuntu-llvm-600-release
      - lib-llvm-ubuntu-debug
      - lib-llvm-ubuntu-release
      - lib-llvm-ubuntu-18.04-debug
      - lib-llvm-ubuntu-18.04-release
      - lib-llvm-ubuntu-openssl-110-debug
      - lib-llvm-ubuntu-openssl-110-release
      - lib-llvm-centos7-debug
      - lib-llvm-centos7-release

      # Alpine debug and release don't work because alpine linux
      # patches llvm to make it work with musl c library.
      # I've done preliminary testing using the patches found
      # in the alpine aport repsitory but they don't apply cleanly.
      # Apparently there version of llvm 3.9.1 is slightly different
      # from what we have. For now skipping testing them.
      #- alpine-debug
      #- alpine-release
