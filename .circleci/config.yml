test-ci-lib-llvm: &test-ci-lib-llvm
  name: Run make lib-llvm
  command: |
    # When testing override CPUs in command line, such as:
    #   $ circleci build -e CPUs=11 --job ubuntu-debug
    echo 'if [ "$CPUs" == "" ]; then cnt=$(nproc); if (( $cnt >= 4 )); then (( cnt=$cnt / 4 )); else cnt=1; fi; if (( $cnt > 4 )); then cnt=4; fi; export CPUs=$cnt; fi;' >> $BASH_ENV
    source $BASH_ENV
    echo "make-llvm: CPUs=$CPUs test_ci_params='$test_ci_params'"
    make -f Makefile-lib-llvm test-ci -j$CPUs $test_ci_params

notify:
  webhooks:
    - url: $ZULIP_WEBHOOK

version: 2
jobs:
  verify-changelog:
    docker:
      - image: ponylang/changelog-tool:release
    steps:
      - checkout
      - run: changelog-tool verify CHANGELOG.md

  validate-docker-image-builds:
      docker:
        - image: docker:17.05.0-ce-git
      steps:
        - checkout
        - setup_remote_docker

        - run: docker build --cache-from=app -t app .
  validate-shell-scripts:
    docker:
      - image: ponylang/ponyc-ci:shellcheck
    steps:
      - checkout

      - run: find . -name '*.bash' -exec shellcheck {} \;

  # Jobs for building and testing with the system installed llvm
  llvm-701-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-7.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-701-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-7.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  llvm-601-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-6.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-601-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-6.0.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  llvm-502-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-5.0.2
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-502-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-5.0.2
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  llvm-391-debug:
    docker:
      - image: ponylang/ponyc-ci:llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  llvm-391-release:
    docker:
      - image: ponylang/ponyc-ci:llvm-3.9.1
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  openssl-110:
    docker:
      - image: ponylang/ponyc-ci:openssl-1.1.0
        user: pony
    steps:
      - checkout
      - run: make all default_ssl=openssl_1.1.0 default_pic=true -j3
      - run: make test-ci default_ssl=openssl_1.1.0 default_pic=true

  alpine-llvm-5-debug:
    docker:
      - image: ponylang/ponyc-ci:alpine-llvm-5
        user: pony
    steps:
      - checkout
      - run: make all config=debug default_pic=true -j3
      - run: make test-ci config=debug default_pic=true

  alpine-llvm-5-release:
    docker:
      - image: ponylang/ponyc-ci:alpine-llvm-5
        user: pony
    steps:
      - checkout
      - run: make all config=release default_pic=true -j3
      - run: make test-ci config=release default_pic=true

  # Jobs for building and testing with ponyc vendor lib/llvm
  lib-llvm-ubuntu-debug:
    docker:
      - image: ponylang/ponyc-ci:ubuntu
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=debug default_pic=true"' >> $BASH_ENV
      - run: *test-ci-lib-llvm

  lib-llvm-ubuntu-release:
    docker:
      - image: ponylang/ponyc-ci:ubuntu
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true"' >> $BASH_ENV
      - run: *test-ci-lib-llvm

  lib-llvm-centos7-debug:
    docker:
      - image: ponylang/ponyc-ci:centos7
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=debug default_pic=true use=llvm_link_static"' >> $BASH_ENV
      - run: *test-ci-lib-llvm

  lib-llvm-centos7-release:
    docker:
      - image: ponylang/ponyc-ci:centos7
        user: pony
    steps:
      - checkout
      - run: echo 'export test_ci_params="config=release default_pic=true use=llvm_link_static"' >> $BASH_ENV
      - run: *test-ci-lib-llvm

  # Jobs for building and testing with ponyc system installed cross-llvm
  cross-llvm-701-debug-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-7.0.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-701-release-arm:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-7.0.1-arm
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabi cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabi-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabi/libc" test-cross-ci

  cross-llvm-701-debug-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-7.0.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-701-release-armhf:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-7.0.1-armhf
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=arm-linux-gnueabihf-gcc CXX=arm-linux-gnueabihf-g++ arch=armv7-a tune=cortex-a9 bits=32 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=arm-unknown-linux-gnueabihf cross_arch=armv7-a cross_cpu=cortex-a9 cross_linker=arm-linux-gnueabihf-gcc QEMU_RUNNER="qemu-arm-static --cpu cortex-a9 -L /usr/local/arm-linux-gnueabihf/libc" test-cross-ci

  cross-llvm-701-debug-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-7.0.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=debug verbose=1 -j3 all
      - run: make config=debug verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=debug verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=debug verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

  cross-llvm-701-release-aarch64:
    docker:
      - image: ponylang/ponyc-ci:cross-llvm-7.0.1-aarch64
        user: pony
    steps:
      - checkout
      # build and test for x86_64 first
      - run: make config=release verbose=1 -j3 all
      - run: make config=release verbose=1 test-ci
      # build libponyrt for target arch
      - run: make config=release verbose=1 CC=aarch64-linux-gnu-gcc CXX=aarch64-linux-gnu-g++ arch=armv8-a tune=cortex-a53 bits=64 CFLAGS="-idirafter /usr/cross/include/" CXXFLAGS="-idirafter /usr/cross/include/" LDFLAGS="-idirafter /usr/cross/include/" PONYPATH=/usr/cross/lib -j3 libponyrt
      # build ponyc for target cross compilation
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" -j3 all
      # run tests for cross built stdlib using ponyc cross building support
      - run: make config=release verbose=1 PONYPATH=/usr/cross/lib cross_triple=aarch64-unknown-linux-gnu cross_arch=armv8-a cross_cpu=cortex-a53 cross_linker=aarch64-linux-gnu-gcc QEMU_RUNNER="qemu-aarch64-static --cpu cortex-a53 -L /usr/local/aarch64-linux-gnu/libc" test-cross-ci

workflows:
  version: 2
  tests:
    jobs:
      # sanity tests
      - verify-changelog
      - validate-shell-scripts

      # p1 tests
      - llvm-701-release:
          requires:
            - verify-changelog
            - validate-shell-scripts
      - llvm-601-release:
          requires:
            - llvm-701-release
      - llvm-502-release:
          requires:
            - llvm-701-release
      - llvm-391-release:
          requires:
            - llvm-701-release

      ### p2 tests
      - llvm-701-debug:
          requires:
            - llvm-701-release
      - llvm-601-debug:
          requires:
            - llvm-601-release
      - llvm-502-debug:
          requires:
            - llvm-502-release
      - llvm-391-debug:
          requires:
            - llvm-391-release

      # alpine
      - alpine-llvm-5-release:
          requires:
            - llvm-502-release
      - alpine-llvm-5-debug:
          requires:
            - llvm-502-debug

      # p2 cross compilation tests
      - cross-llvm-701-release-arm:
          requires:
            - llvm-701-release
      - cross-llvm-701-debug-arm:
          requires:
            - llvm-701-debug
      - cross-llvm-701-release-armhf:
          requires:
            - llvm-701-release
      - cross-llvm-701-debug-armhf:
          requires:
            - llvm-701-debug
#     Currently don't pass
#      - cross-llvm-701-release-aarch64:
#        requires:
#          - llvm-701-release
#      - cross-llvm-701-debug-aarch64:
#        requires:
#          - llvm-701-debug

      # p2 other jobs
      - openssl-110:
          requires:
            - llvm-701-release

      # p2 lib/llvm
      - lib-llvm-ubuntu-release:
          requires:
            - llvm-701-release
      - lib-llvm-ubuntu-debug:
          requires:
            - llvm-701-debug

      # p3 validate centos7
      - lib-llvm-centos7-release:
          requires:
            - lib-llvm-ubuntu-release
      - lib-llvm-centos7-debug:
          requires:
            - lib-llvm-ubuntu-debug

      # p4 did we break docker image building?
      - validate-docker-image-builds:
          requires:
            - lib-llvm-centos7-release
            - lib-llvm-centos7-debug
